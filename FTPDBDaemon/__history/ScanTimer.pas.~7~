unit ScanTimer;

interface

uses
  Classes, Windows, Messages, DateUtils, SysUtils;

const
  MESSAGE_TIMER=WM_USER+100;
  CONST_TIME_MESSAGE_SECONDS=5;
  CONST_TIME_SLEEP=200;

type
  TScanTimer = class(TThread)
  private
    Id: Cardinal;
  protected
    procedure Execute; override;
  public
    constructor Create(Const IdThr: Cardinal);
  end;

implementation

constructor TScanTimer.Create(Const IdThr: Cardinal);
begin
  inherited Create(True);
  Id:=IdThr;
  Priority:=tpLowest;
  FreeOnTerminate:=True;
end;

procedure TScanTimer.Execute;
var StTm: TDateTime;
begin
  While True do
  begin
    StTm:=IncSecond(Now,CONST_TIME_MESSAGE_SECONDS);
    while Now<StTm do
    begin
      Sleep(CONST_TIME_SLEEP);
      if Terminated then Exit;
    end;
    PostThreadMessage(Id, MESSAGE_TIMER, 0, ThreadID);
  end;
end;

end.
