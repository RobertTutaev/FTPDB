unit IdFTPDBScan;

interface

uses
  Classes, IdFTPScan, IBQuery;

type
  TIdFTPDBScan = class(TIdFTPScan)
  private
    { Private declarations }
    IU :   Integer;
    IBQ:   TIBQuery;
    procedure SetIBQ(AValue: TIBQuery);
  protected
    { Protected declarations }
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
  public
    { Public declarations }
    procedure LoadOptions;
    procedure SaveOptions;
    procedure SetFilesToIB;
    procedure SetDirectoriesToIB;
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
  published
    { Published declarations }
    property IBDataSet : TIBQuery Read IBQ Write SetIBQ;
    property IdUser: Integer Read IU Write IU;
  end;

procedure Register;   

implementation

uses IBCustomDataSet, IdTCPClient, SysUtils, DB, IdFTP, IdTCPConnection,
     Variants, IdGlobal, IdFTPCommon, IdFTPFunctions;

Procedure Register;
Begin
  RegisterComponents('FTP',[TIdFTPDBScan]);
End;

{ TIdFTPDBScan }

constructor TIdFTPDBScan.Create(AOwner: TComponent);
begin
  inherited;
  IBQ:=TIBQuery.Create(IBQ);
end;

destructor TIdFTPDBScan.Destroy;
begin
  IBQ:=Nil; IBQ.Free;
  inherited;
end;

procedure TIdFTPDBScan.Notification(AComponent: TComponent;
  Operation: TOperation);
begin
  inherited;
  if(Operation=opRemove)and(AComponent=IBQ)then IBQ:=nil;
end;

procedure TIdFTPDBScan.LoadOptions;

  procedure SetMaxLineAction(AValue: Integer);
  begin
    case AValue of
    1: MaxLineAction:=maException;
    2: MaxLineAction:=maSplit;
    end;
  end;

  function SetBLN(AValue: Integer): Boolean;
  begin
    case AValue of
    1: Result:=False;
    2: Result:=True;
    end;
  end;

  procedure SetTransferType(AValue: Integer);
  begin
    case AValue of
    1: TransferType:=ftBinary;
    2: TransferType:=ftASCII;
    end;
  end;

  procedure SetPProxyType(AValue: Integer);
  begin
    case AValue of
    1: ProxySettings.ProxyType:=fpcmNone;
    2: ProxySettings.ProxyType:=fpcmHttpProxyWithFtp;
    3: ProxySettings.ProxyType:=fpcmOpen;
    4: ProxySettings.ProxyType:=fpcmSite;
    5: ProxySettings.ProxyType:=fpcmTransparent;
    6: ProxySettings.ProxyType:=fpcmUserPass;
    7: ProxySettings.ProxyType:=fpcmUserSite;
    end;
  end;

var
  login_kod, host_kod: String;
begin
  with IBQ do
  if Database.Connected then
  begin
    Active:=False;

    SQL.Clear;
    SQL.Text:='select host from ftp_login where kod='+IntToStr(IU);
    Active:=True;
    login_kod:=IntToStr(IU);
    host_kod:=FieldValues['host'];
    Active:=False;   

    SQL.Clear;
    SQL.Text:='select * from ftp_host where kod='+host_kod;
    Active:=True;
    if not VarIsNull(FieldValues['MaxLineAction']) then
    begin
      Host:=FieldValues['host'];
      SetMaxLineAction(FieldValues['MaxLineAction']);
      MaxLineLength:=FieldValues['MaxLineLength'];
      Passive:=SetBLN(FieldValues['Passive']);
      Port:=FieldValues['Port'];
      RecvBufferSize:=FieldValues['RecvBufferSize'];
      SendBufferSize:=FieldValues['SendBufferSize'];
      SetTransferType(FieldValues['TransferType']);
    end;
    Active:=False;

    SQL.Clear;
    SQL.Text:='select * from ftp_login where kod='+login_kod;
    Active:=True;
    if not VarIsNull(FieldValues['Pass']) then
    begin
      Password:=CoDecModify(FieldValues['PASS'],True);
      ProxySettings.UserName:=FieldValues['PLOGIN'];
      ProxySettings.Password:=CoDecModify(FieldValues['PPASS'], True);
      Username:=FieldValues['login'];
      ProxySettings.Host:=FieldValues['PHOST'];
      ProxySettings.Port:=FieldValues['PPORT'];
      SetPProxyType(FieldValues['PPROXYTYPE']);
      ReadTimeout:=FieldValues['READTIMEOUT'];
    end;
    Active:=False;
  end;
end;

procedure TIdFTPDBScan.SaveOptions;

  function GetMaxLineAction: string;
  begin
    case MaxLineAction of
    maException: Result:='1';
    maSplit:     Result:='2';
    end;
  end;

  function GetBLN(AValue :boolean): string;
  begin
    case AValue of
    False: Result:='1';
    true:  Result:='2';
    end;
  end;

  function GetTransferType: string;
  begin
    case TransferType of
    ftBinary: Result:='1';
    ftASCII:  Result:='2';
    end;
  end;

  function GetPProxyType: string;
  begin
    case ProxySettings.ProxyType of
    fpcmNone:             Result:='1';
    fpcmHttpProxyWitHftp: Result:='2';
    fpcmOpen:             Result:='3';
    fpcmSite:             Result:='4';
    fpcmTransparent:      Result:='5';
    fpcmUserPass:         Result:='6';
    fpcmUserSite:         Result:='7';
    end;
  end;

var
  login_kod, host_kod: String;
begin
with IBQ do
  if Database.Connected then
  begin
    Active:=False;

    SQL.Clear;
    SQL.Text:='select kod from getlogin('''+Trim(Host)+''', '''+Username+''')';
    Active:=True;
    login_kod:=FieldValues['kod'];
    IU:=StrToInt(login_kod);
    Active:=False;

    SQL.Clear;
    SQL.Text:='select kod from gethost('''+Trim(Host)+''')';
    Active:=True;
    host_kod:=FieldValues['kod'];
    Active:=False;

    SQL.Clear;
    SQL.Text:='update ftp_host set '+
              '  MaxLineAction='+ GetMaxLineAction +
              ', MaxLineLength='+ IntToStr(MaxLineLength)+
              ', Passive='+       GetBLN(Passive)+
              ', Port='+          IntToStr(Port)+
              ', RecvBufferSize='+IntToStr(RecvBufferSize)+
              ', SendBufferSize='+IntToStr(SendBufferSize)+
              ', TransferType='+  GetTransferType+
              '  where kod='+host_kod;
    ExecSQL;

    SQL.Text:='update ftp_login set '+
              '    PASS='''+       CoDecModify(Password, False)+
              ''', PLOGIN='''+     ProxySettings.UserName+
              ''', PPASS='''+      CoDecModify(ProxySettings.Password, False)+
              ''', PHOST='''+      ProxySettings.Host+
              ''', PPORT='+      IntToStr(ProxySettings.Port)+
              ',   PPROXYTYPE='+ GetPProxyType+
              ',   READTIMEOUT='+IntToStr(ReadTimeout)+
              '    where kod='+login_kod;
    ExecSQL;
    Transaction.CommitRetaining;
  end;
end; 

procedure TIdFTPDBScan.SetDirectoriesToIB;
var login_kod, i: Integer;
    URL: string;
begin
with IBQ do
  if(Database.Connected)and(DirectoriesList.Count>0)then
  begin
    URL:='ftp://'+Host;
    Active:=False;

    SQL.Clear;
    SQL.Text:='select kod from setlogin('''+Trim(Host)+''', '''+Username+''')';
    Active:=True;
    login_kod:=FieldValues['kod'];
    Active:=False;

    SQL.Clear;
    SQL.Text:='delete from ftp_dirs where(login='+IntToStr(login_kod)+')';
    ExecSQL;

    SQL.Clear;
    SQL.Text:='insert into ftp_dirs '+
      '( LOGIN, A_ALL, A_PATH, A_ATR, A_USER, A_GROUP, A_SIZE, A_DATE, A_TIME, A_NAME) values'+
      '(:LOGIN,:A_ALL,:A_PATH,:A_ATR,:A_USER,:A_GROUP,:A_SIZE,:A_DATE,:A_TIME,:A_NAME)';
    Prepared:=True;

    for i:=0 to DirectoriesList.Count-1 do
    begin
      ParamByName('LOGIN').AsInteger:=login_kod;
      ParamByName('A_ALL').AsString:=URL+DirectoriesList.Strings[i];
      ParamByName('A_PATH').AsString:=URL+GetDirectoryInfo(i).Path;
      ParamByName('A_ATR').AsString:=GetDirectoryInfo(i).Atr;
      ParamByName('A_USER').AsInteger:=GetDirectoryInfo(i).User;
      ParamByName('A_GROUP').AsInteger:=GetDirectoryInfo(i).Group;
      ParamByName('A_SIZE').AsInteger:=GetDirectoryInfo(i).Size;
      ParamByName('A_DATE').AsDate:=GetDirectoryInfo(i).DtTm;
      ParamByName('A_TIME').AsTime:=GetDirectoryInfo(i).DtTm;
      ParamByName('A_NAME').AsString:=GetDirectoryInfo(i).Name;

      ExecSQL;
    end;
    Prepared:=False;

    SQL.Clear;
    SQL.Text:='execute procedure ev_gen(''END_SCAN2_'+Trim(Host)+''')';
    ExecSQL;

    Transaction.CommitRetaining;
  end;
end;

procedure TIdFTPDBScan.SetFilesToIB;
var host_kod, i: Integer;
    URL: string;
begin
with IBQ do
  if(Database.Connected)and(FilesList.Count>0)then
  begin
    URL:='ftp://'+Host;
    Active:=False;

    SQL.Clear;
    SQL.Text:='select kod from sethost('''+Trim(Host)+''')';
    Active:=True;
    host_kod:=FieldValues['kod'];
    Active:=False; 

    SQL.Clear;
    SQL.Text:='delete from ftp_files where host='+IntToStr(host_kod);
    ExecSQL;

    SQL.Clear;
    SQL.Text:='insert into ftp_files '+
      '( HOST, A_ALL, A_PATH, A_ATR, A_USER, A_GROUP, A_SIZE, A_DATE, A_TIME, A_NAME) values'+
      '(:HOST,:A_ALL,:A_PATH,:A_ATR,:A_USER,:A_GROUP,:A_SIZE,:A_DATE,:A_TIME,:A_NAME)';      
    Prepared:=True;

    for i:=0 to FilesList.Count-1 do
    begin
      ParamByName('HOST').AsInteger:=host_kod;
      ParamByName('A_ALL').AsString:=URL+FilesList.Strings[i];
      ParamByName('A_PATH').AsString:=URL+GetFileInfo(i).Path;
      ParamByName('A_ATR').AsString:=GetFileInfo(i).Atr;
      ParamByName('A_USER').AsInteger:=GetFileInfo(i).User;
      ParamByName('A_GROUP').AsInteger:=GetFileInfo(i).Group;
      ParamByName('A_SIZE').AsInteger:=GetFileInfo(i).Size;
      ParamByName('A_DATE').AsDate:=GetFileInfo(i).DtTm;
      ParamByName('A_TIME').AsTime:=GetFileInfo(i).DtTm;
      ParamByName('A_NAME').AsString:=GetFileInfo(i).Name;

      ExecSQL;
    end;
    Prepared:=False;

    SQL.Clear;
    SQL.Text:='execute procedure ev_gen(''END_SCAN1_'+Trim(Host)+''')';
    ExecSQL;

    Transaction.CommitRetaining;
  end;
end;

procedure TIdFTPDBScan.SetIBQ(AValue: TIBQuery);
begin
  if AValue<>IBQ then
  begin
    if AValue<>nil then
    begin
      if Assigned(IBQ)and(IBQ.Owner=Self)then IBQ.Free;
      IBQ:=AValue;
      IBQ.FreeNotification(self);
    end else //nil value
    begin
      if Assigned(IBQ)and(IBQ.Owner<>Self)then
      begin
        IBQ.Name:='IBQ'; //optional bit, but makes result much nicer
        IBQ.SetSubComponent(True);
        IBQ.FreeNotification(Self);
      end;
    end;
  end;
end;


end.
