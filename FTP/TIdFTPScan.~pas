unit TIdFTPScan;

interface

uses
  SysUtils, Classes, IdBaseComponent, IdComponent, IdTCPConnection,
  IdTCPClient, IdFTP;

resourcestring
  EChangeDir = 'Error "ChangeDir"';

type
  EChangeDirError = class(Exception);

Type
  TFFile=Record
    Atr:  String;
    User: String;
    Group:String;
    Size: String;
    Date: String;
    Time: String;
    Name: String;
   end;

type
  TIdFTPScan = class(TIdFTP)
  private
    { Private declarations }
    Temp:        TStringList;
    Dir:         TStringList;
    Files:       TStringList;
    DirShadow:   TStringList;
    FilesShadow: TStringList;
  protected
    { Protected declarations }
    function Atr(Const Txt: String): TFFile;
    function AtrEmpty: TFFile;
    procedure Go;
  public
    { Public declarations }
    function  GetFileInfo(N: Integer): TFFile;
    function  GetDirectoryInfo(N: Integer): TFFile;
    procedure Scan;
    procedure ScanAll(Path: String='/');
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
  published
    { Published declarations }
    property FilesList: TStringList Read Files;
    property DirectoriesList: TStringList Read Dir;
  end;

procedure Register;

Const
  Atr_ln=10;
  User_st=12; User_ln=3;
  Group_st=21;Group_ln=3;
  Size_st=31; Size_ln=11;
  Date_st=43; Date_ln=6;
  Time_st=50; Time_ln=5;
  Name_st=56;

//   Atr        User      Group       Size   Date  Time           Name
//_________|10_______|20_______|30_______|40_______|50_______|60_______|70___
//123456789012345678901234567890123456789012345678901234567890123456789012345
//-rw-rw-rw-   1 user     group       39424 Oct 17 10:45 многодетные.DOC

implementation

procedure Register;
begin
  RegisterComponents('Subs', [TIdFTPScan]);
end;

{ TIdFTPScan }

constructor TIdFTPScan.Create(AOwner: TComponent);
begin
  inherited;
  Temp:= TStringList.Create;
  Dir:=  TStringList.Create;
  Files:=TStringList.Create;
  DirShadow:=  TStringList.Create;
  FilesShadow:=TStringList.Create;
end;

destructor TIdFTPScan.Destroy;
begin
  Temp.Free;
  Dir.Free;
  Files.Free;
  DirShadow.Free;
  FilesShadow.Free;
  inherited;
end;

function TIdFTPScan.Atr(Const Txt: String): TFFile;

  function GetDate(Const AValue: String): string;
  Const ShortMonthNamesEn: Array[1..2,1..12] of AnsiString =
    (('jan', 'feb', 'mar', 'apr',
      'may', 'jun', 'jul', 'aug',
      'sep', 'oct', 'nov', 'dec'),
     ('.01', '.02', '.03', '.04',
      '.05', '.06', '.07', '.08',
      '.09', '.10', '.11', '.12'));
  var i: Integer;
      A,B: String;
  begin
    A:=Copy(LowerCase(AValue),1,3);
    B:=Trim(Copy(AValue,5,2));
    If Length(B)=1 then B:='0'+B;  

    for i:=1 to 12 do
      if A=ShortMonthNamesEn[1,i] then
      begin
        Result:=B+ShortMonthNamesEn[2,i];
        Break;
      end;
  end;
  
begin
  Result.Atr:=          Copy(Txt, 1,        Atr_ln);
  Result.User:=         Copy(Txt, User_st,  User_ln);
  Result.Group:=        Copy(Txt, Group_st, Group_ln);
  Result.Size:=         Copy(Txt, Size_st,  Size_ln);
  Result.Date:= GetDate(Copy(Txt, Date_st,  Date_ln));
  Result.Time:=         Copy(Txt, Time_st,  Time_ln);
  Result.Name:=         Copy(Txt, Name_st,  length(Txt));
end;

function TIdFTPScan.AtrEmpty: TFFile;
begin
  Result.Atr:=  '';
  Result.User:= '';
  Result.Group:='';
  Result.Size:= '';
  Result.Date:= '';
  Result.Time:= '';
  Result.Name:= '';
end;

procedure TIdFTPScan.Go;
var i:               Integer;
    FFile:           TFFile;
    CurDir, CurDir2: String;
begin
  CurDir:= RetrieveCurrentDir;
  CurDir2:=RetrieveCurrentDir;
  if Copy(CurDir,length(CurDir),1)<>'/' then CurDir:=CurDir+'/';
  i:=0;

  while i<Temp.Count do
  begin
    FFile:=Atr(Temp.Strings[i]);
    //Если папка, то
    If Copy(Temp.Strings[i],1,1)='d' then
    begin
      if not((FFile.Name='.')or
        (FFile.Name='..')or
        (Temp.Strings[i]=CurDir2))then
      begin
        Dir.Append(CurDir+FFile.Name);
        DirShadow.Append(Temp.Strings[i]);
      end;
    end else
    //Если файл, то
    begin
      Files.Append(CurDir+FFile.Name);
      FilesShadow.Append(Temp.Strings[i]);
    end;
    i:=i+1;
  end;
  Temp.Clear;
end;

procedure TIdFTPScan.Scan;
begin
  Dir.Clear;
  Files.Clear;
  DirShadow.Clear;
  FilesShadow.Clear;
  List(Temp,'',True);
  Go;
end;

procedure TIdFTPScan.ScanAll(Path: String='/');
var i:              Integer;
    PathBefore:           String;
begin
  PathBefore:=RetrieveCurrentDir;
  try
    ChangeDir(Path)
  except
    raise EChangeDirError.Create(EChangeDir);
    Exit;
  end;
  i:=0;

  Dir.Clear;
  Files.Clear;
  DirShadow.Clear;
  FilesShadow.Clear;
  List(Temp,'',True);
  Go;

  While i<Dir.Count do
  begin
    try
      ChangeDir(Dir.Strings[i]);
    except
      Dir.Delete(i);
      DirShadow.Delete(i);
    end;
    List(Temp,'',True);
    Go;
    i:=i+1;
  end;

  try
    ChangeDir(PathBefore)
  except
    raise EChangeDirError.Create(EChangeDir);
    Exit;
  end;   
end;

function TIdFTPScan.GetDirectoryInfo(N: Integer): TFFile;
begin
  if(N<0)or(N>DirShadow.Count-1)then Result:=AtrEmpty else Result:=Atr(DirShadow.Strings[N]);
end;

function TIdFTPScan.GetFileInfo(N: Integer): TFFile;
begin
  if(N<0)or(N>FilesShadow.Count-1)then Result:=AtrEmpty else Result:=Atr(FilesShadow.Strings[N]);
end;


end.
