unit ServerController;

interface

uses
  SysUtils, Classes, IWServerControllerBase, IWBaseForm, HTTPApp,
  UserSessionUnit, IWApplication, IWAppForm, Unit7, IWBaseComponent,
  IWBaseHTMLComponent, IWExtCtrls, ServiceManager, ExtCtrls;

type
  TIWServerController = class(TIWServerControllerBase)
    Timer1: TTimer;
    procedure IWServerControllerBaseNewSession(ASession: TIWApplication;
      var VMainForm: TIWBaseForm);
    procedure IWServerControllerBaseCreate(Sender: TObject);
    procedure IWServerControllerBaseCloseSession(ASession: TIWApplication);
    procedure IWTimerDaemonStartHTMLTag(ASender: TObject; ATag: TIWHTMLTag);
    procedure IWServerControllerBaseDestroy(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
  private
  public
    SM : TServiceManager;
    IsReg: Boolean;
    count_sessions: Integer;
  end;

  function UserSession: TIWUserSession;
  function IWServerController: TIWServerController;

implementation

{$R *.dfm}

uses
  IWInit, IWGlobal, DB;

function IWServerController: TIWServerController;
begin
  Result := TIWServerController(GServerController);
end;

function UserSession: TIWUserSession;
begin
  Result := TIWUserSession(WebApplication.Data);
end;

procedure TIWServerController.IWServerControllerBaseCloseSession(
  ASession: TIWApplication);
begin
  count_sessions:=count_sessions-1;
end;

procedure TIWServerController.IWServerControllerBaseCreate(Sender: TObject);
var DMO: TDataModuleOptions;
begin
  count_sessions:=0;

  Try
    DMO:=TDataModuleOptions.Create(DMO);
    IsReg:=DMO.IsReg;
    Try SessionTimeout:=DMO.IBTableOptions.FieldValues['STO'] except end;
    Try ServerResizeTimeout:=DMO.IBTableOptions.FieldValues['SRTO'] except end;
    Try Port:=DMO.IBTableOptions.FieldValues['PORT'] except end;
    Try RestrictSubnet:=Boolean(DMO.IBTableOptions.FieldValues['RSN']-1) except end;
  finally
    DMO.Free
  end;

  try
    SM:=TServiceManager.Create;
    SM.OpenServiceConnection('FTPDBDaemonService');
  finally  
  end;
end;

procedure TIWServerController.IWServerControllerBaseDestroy(Sender: TObject);
begin
  SM.Free;
end;

procedure TIWServerController.IWServerControllerBaseNewSession(
  ASession: TIWApplication; var VMainForm: TIWBaseForm);
begin
  ASession.Data:=TIWUserSession.Create(nil);
  count_sessions:=count_sessions+1;
end;

procedure TIWServerController.IWTimerDaemonStartHTMLTag(ASender: TObject;
  ATag: TIWHTMLTag);
begin
  //
end;

procedure TIWServerController.Timer1Timer(Sender: TObject);
begin
  Case SM.GetStatus of
  SERVICE_STOPPED:
    begin
    end;
  end;
end;

initialization
  TIWServerController.SetServerControllerClass;

end.

